//https://projecthub.arduino.cc/Arduino_Scuola/a-simple-simon-says-game-6f7fef
//https://www.w3schools.com/cpp/cpp_structs.asp
//i got important ideas on how it might be structured from the first link
//second link taught me how to do something that we didnt learn that is important to my code

#include <Adafruit_CircuitPlayground.h>

uint8_t colorPattern[25];
uint8_t skillLevel;            // skill level that the player has selected (1,2,3, or 4)
uint8_t sequenceLength;        // length of sequence selected by player in the skill level function
uint8_t currentStep;           //steps of pattern player is currently on
unsigned long startGuessTime;  // starting the timer in milliseconds for how long player has to guess
int8_t guess;                  //player guess

const int leftbutton = 4;   //set left button
const int rightbutton = 5;  //set right button
int currentIndex = 0;       // set for patterns to be played
int lightvalue;
int lightParam;

const int switchPin = 7;       // set switch
volatile bool switchFlag = 0;  // both for switch working
volatile bool switchState = 0;

bool gameRunning = false;  //game is off to begin
int score = 0;             //score starts at 0

struct button {
  uint8_t capPad[2];
  uint8_t pixel[3];
  uint32_t color;
  uint16_t freq;
} buttonInput[] = {
  { { 3, 2 }, { 0, 1, 2 }, 0x00FF00, 350 },   //cap sensors, pixels, color, tone
  { { 0, 1 }, { 2, 3, 4 }, 0xFFFF00, 250 },   // yellow corenr
  { { 12, 6 }, { 5, 6, 7 }, 0x0000FF, 450 },  // blue corner
  { { 9, 10 }, { 7, 8, 9 }, 0xFF0000, 150 },  // red corner
};

uint32_t redish[10] = {
  0x800000,  // Dark blue color
  0xFF3300,  // Medium blue color
  0xFF661A,  // Light blue color
  0x800000,  // Dark blue color
  0xFF3300,  // Medium blue color
  0xFF661A,
  0x800000,  // Dark blue color
  0xFF3300,  // Medium blue color
  0xFF661A,  // Light blue color
  0x800000,
};
uint32_t blueish[10] = {
  0x000080,  // Dark blue color
  0x0000FF,  // Medium blue color
  0xADD8E6,  // Light blue color
  0x000080,  // Dark blue color
  0x0000FF,  // Medium blue color
  0xADD8E6,  // Light blue color
  0x000080,  // Dark blue color
  0x0000FF,  // Medium blue color
  0xADD8E6,  // Light blue color
  0x000080,  // Dark blue color
};
uint32_t clovers[10] = {
  //array of colors
  0x0D3300,  // Dark Green
  0x66FF33,  // Green
  0x0D3300,  // Dark Green
  0x66FF33,  // Green
  0x0D3300,  // Dark Green
  0x66FF33,  // Green
  0x0D3300,  // Dark Green
  0x66FF33,  // Green
  0x0D3300,  // Dark Green
  0x66FF33,  // Green
};

void setup() {
  CircuitPlayground.begin();  //begin circuit playground
  Serial.begin(9600);
  CircuitPlayground.clearPixels();                                // clear pixels
  CircuitPlayground.setPixelColor(0, 0xFFFFFF);                   // set them black
  attachInterrupt(digitalPinToInterrupt(7), switch_ISR, CHANGE);  // switch interrupt
  randomSeed(millis());                                           // random seed
  shakepattern(500, 10);
  chooseSkillLevel();  // start the skill level function
  skillLevel = 1;      // begin it at level 1
  newGame();           // start a new game
}

void loop() {

  lightvalue = CircuitPlayground.lightSensor();    //reads the light sensor
  lightParam = map(lightvalue, 0, 1000, 20, 500);  //maps to a better range
  if (lightParam > 500)                            //resets it if too high
    lightParam = 500;

  switchState = digitalRead(switchPin);  //read the switch state

  if (switchState == 1 && lightvalue > 120) {  //if the switch is on and its light enough then we can play the game
    // Show sequence up to current step
    showSequence();
    for (int i = 0; i < currentStep; i++) {  // for loop where i is less than the current amount of steps in the pattern being played
      startGuessTime = millis();
      guess = -1;
      while ((millis() - startGuessTime < 3000) && (guess == -1)) {  // if the players guess time is under 3 seconds and the guess is a valid input then we can read the input of the player
        guess = getButtonPress();                                    //players guess for what color is next calls function which reads the sensors tapped
      }
      if (guess != colorPattern[i]) {  // until the guess is incorrect continue
        gameLost(colorPattern[i]);     // if the guess is incorrect end the game
      }
    }

    currentStep++;              // add one to the current step
    Serial.print(currentStep);  // display score to serial monitor
    Serial.println("Your score is: ");

    if (currentStep > sequenceLength) {  //if the amount of steps you are on is greater than the sequence length you selected in the skill level then it beats the game
      delay(800);                        // short delay
      gameWon();                         //play the function for winning the game
    }
    delay(800);  // wait a bit
  } else {
    endGame();  // if the switch is off play the end game function
  }
}

void chooseSkillLevel() {                     // function for choosing skill level based on how many patterns you want the maximum to be
  while (!CircuitPlayground.rightButton()) {  // until the right button is pressed you can select what mode you want
    if (CircuitPlayground.leftButton()) {
      skillLevel = skillLevel + 1;         //increment skill levels
      if (skillLevel > 4) skillLevel = 1;  // if the skill level exceeds case 4, cycle back to case 1
      // press the left button to add to the skill level until you get to the desired one
      CircuitPlayground.clearPixels();  //clear pixels
      for (int i = 0; i < skillLevel; i++) {
        CircuitPlayground.setPixelColor(i, 0xFFFFFF);  //set pixel colors white
      }

      delay(250);  //debounce
    }
  }
}
void newGame() {  // initialize the game
  // Set game sequence length based on desired skill level
  switch (skillLevel) {
    case 1:
      sequenceLength = 5;  //easy mode
      break;
    case 2:
      sequenceLength = 10;  //medium
      break;
    case 3:
      sequenceLength = 15;  //difficult
      break;
    case 4:
      sequenceLength = 20;  //expert level
      break;
  }
  for (int i = 0; i < sequenceLength; i++) {
    colorPattern[i] = random(4);  // choose one of the colors to display
  }
  currentStep = 1;  // start the game on step 1
}
void showbuttonPressed(uint8_t b, uint16_t duration) {  // this one shows the button that was pressed
  CircuitPlayground.clearPixels();
  for (int i = 0; i < 3; i++) {
    CircuitPlayground.setPixelColor(buttonInput[b].pixel[i], buttonInput[b].color);// sets color by which button was pressed, matching it tp the pixels and color
  }
  CircuitPlayground.playTone(buttonInput[b].freq, duration);// matches it to the frequency it should be and how long it should play
  CircuitPlayground.clearPixels();
}

  // Play back sequence up to current step
  for (int i = 0; i < currentStep; i++) {
    delay(50);
    showbuttonPressed(colorPattern[i], toneDuration);
  }
}
uint8_t getButtonPress() {
  for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 2; j++) {
      if (CircuitPlayground.readCap(buttonInput[i].capPad[j]) > 600) {
        showbuttonPressed(i, 250);
        return i;
      }
    }
  }
  return -1;
}
void gameLost(int b) {  //game lost pattern
  // Show button that should have been pressed
  for (int i = 0; i < 3; i++) {
    CircuitPlayground.setPixelColor(buttonInput[b].pixel[i], buttonInput[b].color);  //sets the pixel color to what should have been pressed, first argument is which pixels to light up, second is what color they should be
  }
  // play a losing sound
  CircuitPlayground.playTone(100, 1500);

  // wait until game is reset using the reset button
  while (true) {}
}
void gameWon() {  //game winning pattern
  for (int i = 0; i < 3; i++) {
    clover(500, 10);
  }
  // Loop lights forever
  while (true) {
    clover(500, 10);
  }
}
void switch_ISR() {
  switchFlag = true;
}
void endGame() {
  gameRunning = false;
  startpattern(500, 10);
  Serial.print("Game Over! Your score: ");
  Serial.println(score);
}
void startpattern(int currentSpeed, int stripLen) {
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, redish[(currentIndex + i) % 10]);
  }
  currentIndex = (currentIndex + 1) % 10;  // Move to the next color
  delay(200);
}
void shakepattern(int currentSpeed, int stripLen) {
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, blueish[(currentIndex + i) % 10]);
  }
  currentIndex = (currentIndex + 1) % 10;  // Move to the next color
  delay(200);
}
void clover(int currentSpeed, int stripLen) {
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, clovers[(currentIndex + i) % 10]);
  }
  currentIndex = (currentIndex + 1) % 10;  // Move to the next color
  delay(300);
}
void showSequence() {  //speeds the tone up as the levels of difficulty increase
  // Set tone playback duration based on current sequence length
  uint16_t toneDuration;
  if (currentStep <= 5) {
    toneDuration = 400;
  } else if (currentStep <= 10) {
    toneDuration = 300;
  } else {
    toneDuration = 200;
  }

